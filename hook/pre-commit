#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit" and move to
# .git/hooks in your project folder.

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
    exit 1
fi

#Listagem dos arquivos em Stage
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "js$")
if [ "$STAGED_FILES" = "" ]

then
    echo "Pre-commit: No staged files for test."
    exit 0
fi

PASS=true

#ESLint valida arquivos staged
for FILE in $STAGED_FILES
do
    yarn eslint --quiet "$FILE"

    if [ "$?" = 0 ]
    
    then
        echo "\t\033[32mESLint Passed: $FILE\033[0m"
    else
        echo "\t\033[41mESLint Failed: $FILE\033[0m"
        PASS=false
    fi
done

# Jest verifica testes relacionados a arquivos staged
yarn jest --bail --findRelatedTests $STAGED_FILES

if [ "$?" = 0 ]

then
    echo "\t\033[32mJest Tests Passed\033[0m"
else
    echo "\t\033[41mJest Tests Failed\033[0m"
    PASS=false
fi

echo $PASS

if [ "$PASS" = true ]

then
    echo "\t\033[32mPre-commit approved.\033[0m"
    exit 0
else
    echo "\t\033[41mCommit aborted due to failed tests.\033[0m"
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against 